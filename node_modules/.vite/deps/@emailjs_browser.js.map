{
  "version": 3,
  "sources": ["../../@emailjs/browser/es/store/store.js", "../../@emailjs/browser/es/methods/init/init.js", "../../@emailjs/browser/es/utils/validateParams.js", "../../@emailjs/browser/es/models/EmailJSResponseStatus.js", "../../@emailjs/browser/es/api/sendPost.js", "../../@emailjs/browser/es/methods/send/send.js", "../../@emailjs/browser/es/methods/sendForm/sendForm.js", "../../@emailjs/browser/es/index.js"],
  "sourcesContent": ["export const store = {\r\n    _origin: 'https://api.emailjs.com',\r\n};\r\n", "import { store } from '../../store/store';\r\n/**\r\n * Initiation\r\n * @param {string} publicKey - set the EmailJS public key\r\n * @param {string} origin - set the EmailJS origin\r\n */\r\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\r\n    store._userID = publicKey;\r\n    store._origin = origin;\r\n};\r\n", "export const validateParams = (publicKey, serviceID, templateID) => {\r\n    if (!publicKey) {\r\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\r\n    }\r\n    if (!serviceID) {\r\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\r\n    }\r\n    if (!templateID) {\r\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\r\n    }\r\n    return true;\r\n};\r\n", "export class EmailJSResponseStatus {\r\n    constructor(httpResponse) {\r\n        this.status = httpResponse ? httpResponse.status : 0;\r\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\r\n    }\r\n}\r\n", "import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\r\nimport { store } from '../store/store';\r\nexport const sendPost = (url, data, headers = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.addEventListener('load', ({ target }) => {\r\n            const responseStatus = new EmailJSResponseStatus(target);\r\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\r\n                resolve(responseStatus);\r\n            }\r\n            else {\r\n                reject(responseStatus);\r\n            }\r\n        });\r\n        xhr.addEventListener('error', ({ target }) => {\r\n            reject(new EmailJSResponseStatus(target));\r\n        });\r\n        xhr.open('POST', store._origin + url, true);\r\n        Object.keys(headers).forEach((key) => {\r\n            xhr.setRequestHeader(key, headers[key]);\r\n        });\r\n        xhr.send(data);\r\n    });\r\n};\r\n", "import { store } from '../../store/store';\r\nimport { validateParams } from '../../utils/validateParams';\r\nimport { sendPost } from '../../api/sendPost';\r\n/**\r\n * Send a template to the specific EmailJS service\r\n * @param {string} serviceID - the EmailJS service ID\r\n * @param {string} templateID - the EmailJS template ID\r\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\r\n * @param {string} publicKey - the EmailJS public key\r\n * @returns {Promise<EmailJSResponseStatus>}\r\n */\r\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\r\n    const uID = publicKey || store._userID;\r\n    validateParams(uID, serviceID, templateID);\r\n    const params = {\r\n        lib_version: '3.9.1',\r\n        user_id: uID,\r\n        service_id: serviceID,\r\n        template_id: templateID,\r\n        template_params: templatePrams,\r\n    };\r\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\r\n        'Content-type': 'application/json',\r\n    });\r\n};\r\n", "import { store } from '../../store/store';\r\nimport { validateParams } from '../../utils/validateParams';\r\nimport { sendPost } from '../../api/sendPost';\r\nconst findHTMLForm = (form) => {\r\n    let currentForm;\r\n    if (typeof form === 'string') {\r\n        currentForm = document.querySelector(form);\r\n    }\r\n    else {\r\n        currentForm = form;\r\n    }\r\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\r\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\r\n    }\r\n    return currentForm;\r\n};\r\n/**\r\n * Send a form the specific EmailJS service\r\n * @param {string} serviceID - the EmailJS service ID\r\n * @param {string} templateID - the EmailJS template ID\r\n * @param {string | HTMLFormElement} form - the form element or selector\r\n * @param {string} publicKey - the EmailJS public key\r\n * @returns {Promise<EmailJSResponseStatus>}\r\n */\r\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\r\n    const uID = publicKey || store._userID;\r\n    const currentForm = findHTMLForm(form);\r\n    validateParams(uID, serviceID, templateID);\r\n    const formData = new FormData(currentForm);\r\n    formData.append('lib_version', '3.9.1');\r\n    formData.append('service_id', serviceID);\r\n    formData.append('template_id', templateID);\r\n    formData.append('user_id', uID);\r\n    return sendPost('/api/v1.0/email/send-form', formData);\r\n};\r\n", "import { init } from './methods/init/init';\r\nimport { send } from './methods/send/send';\r\nimport { sendForm } from './methods/sendForm/sendForm';\r\nexport { init, send, sendForm };\r\nexport default {\r\n    init,\r\n    send,\r\n    sendForm,\r\n};\r\n"],
  "mappings": ";;;AAAO,IAAM,QAAQ;AAAA,EACjB,SAAS;AACb;;;ACIO,IAAM,OAAO,CAAC,WAAW,SAAS,8BAA8B;AACnE,QAAM,UAAU;AAChB,QAAM,UAAU;AACpB;;;ACTO,IAAM,iBAAiB,CAAC,WAAW,WAAW,eAAe;AAChE,MAAI,CAAC,WAAW;AACZ,UAAM;AAAA,EACV;AACA,MAAI,CAAC,WAAW;AACZ,UAAM;AAAA,EACV;AACA,MAAI,CAAC,YAAY;AACb,UAAM;AAAA,EACV;AACA,SAAO;AACX;;;ACXO,IAAM,wBAAN,MAA4B;AAAA,EAC/B,YAAY,cAAc;AACtB,SAAK,SAAS,eAAe,aAAa,SAAS;AACnD,SAAK,OAAO,eAAe,aAAa,eAAe;AAAA,EAC3D;AACJ;;;ACHO,IAAM,WAAW,CAAC,KAAK,MAAM,UAAU,CAAC,MAAM;AACjD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAM,MAAM,IAAI,eAAe;AAC/B,QAAI,iBAAiB,QAAQ,CAAC,EAAE,OAAO,MAAM;AACzC,YAAM,iBAAiB,IAAI,sBAAsB,MAAM;AACvD,UAAI,eAAe,WAAW,OAAO,eAAe,SAAS,MAAM;AAC/D,gBAAQ,cAAc;AAAA,MAC1B,OACK;AACD,eAAO,cAAc;AAAA,MACzB;AAAA,IACJ,CAAC;AACD,QAAI,iBAAiB,SAAS,CAAC,EAAE,OAAO,MAAM;AAC1C,aAAO,IAAI,sBAAsB,MAAM,CAAC;AAAA,IAC5C,CAAC;AACD,QAAI,KAAK,QAAQ,MAAM,UAAU,KAAK,IAAI;AAC1C,WAAO,KAAK,OAAO,EAAE,QAAQ,CAAC,QAAQ;AAClC,UAAI,iBAAiB,KAAK,QAAQ,IAAI;AAAA,IAC1C,CAAC;AACD,QAAI,KAAK,IAAI;AAAA,EACjB,CAAC;AACL;;;ACZO,IAAM,OAAO,CAAC,WAAW,YAAY,eAAe,cAAc;AACrE,QAAM,MAAM,aAAa,MAAM;AAC/B,iBAAe,KAAK,WAAW,UAAU;AACzC,QAAM,SAAS;AAAA,IACX,aAAa;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,iBAAiB;AAAA,EACrB;AACA,SAAO,SAAS,wBAAwB,KAAK,UAAU,MAAM,GAAG;AAAA,IAC5D,gBAAgB;AAAA,EACpB,CAAC;AACL;;;ACrBA,IAAM,eAAe,CAAC,SAAS;AAC3B,MAAI;AACJ,MAAI,OAAO,SAAS,UAAU;AAC1B,kBAAc,SAAS,cAAc,IAAI;AAAA,EAC7C,OACK;AACD,kBAAc;AAAA,EAClB;AACA,MAAI,CAAC,eAAe,YAAY,aAAa,QAAQ;AACjD,UAAM;AAAA,EACV;AACA,SAAO;AACX;AASO,IAAM,WAAW,CAAC,WAAW,YAAY,MAAM,cAAc;AAChE,QAAM,MAAM,aAAa,MAAM;AAC/B,QAAM,cAAc,aAAa,IAAI;AACrC,iBAAe,KAAK,WAAW,UAAU;AACzC,QAAM,WAAW,IAAI,SAAS,WAAW;AACzC,WAAS,OAAO,eAAe,OAAO;AACtC,WAAS,OAAO,cAAc,SAAS;AACvC,WAAS,OAAO,eAAe,UAAU;AACzC,WAAS,OAAO,WAAW,GAAG;AAC9B,SAAO,SAAS,6BAA6B,QAAQ;AACzD;;;AC9BA,IAAO,aAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACJ;",
  "names": []
}
